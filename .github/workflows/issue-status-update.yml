name: Issue and Project Status Update

on:
  pull_request:
    types: [opened, closed, reopened]

jobs:
  update_issue_and_project:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Update Issue and Project Status
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PROJECT_TOKEN: ${{ secrets.PROJECT_TOKEN }}
        REPO: ${{ github.repository }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        PR_ACTION: ${{ github.event.action }}
        PR_MERGED: ${{ github.event.pull_request.merged }}
        PROJECT_ID: ${{ secrets.PROJECT_ID }}
        STATUS_FIELD_ID: ${{ secrets.STATUS_FIELD_ID }}
      run: |
        cat << 'EOF' > update_status.py
        import os
        import requests
        import json
        import sys
        import re

        # GitHub API設定
        token = os.environ['PROJECT_TOKEN'] if 'PROJECT_TOKEN' in os.environ else os.environ['GITHUB_TOKEN']
        repo = os.environ['REPO']
        pr_number = os.environ['PR_NUMBER']
        pr_action = os.environ['PR_ACTION']
        pr_merged = os.environ['PR_MERGED'].lower() == 'true'
        project_id = os.environ['PROJECT_ID']
        status_field_id = os.environ['STATUS_FIELD_ID']

        print(f"Project ID: {project_id}")
        print(f"Status Field ID: {status_field_id}")

        headers = {
            'Authorization': f'Bearer {token}',
            'Accept': 'application/vnd.github.v3+json'
        }

        base_url = f'https://api.github.com/repos/{repo}'

        def get_linked_issue_number():
            url = f'{base_url}/pulls/{pr_number}'
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            pr_data = response.json()
            
            print(f"PR Data: {json.dumps(pr_data, indent=2)}")
            
            # Check PR body for "Closes #X" or "Fixes #X"
            body = pr_data.get('body') or ''
            print(f"PR Body: {body}")
            match = re.search(r'(closes|fixes) #(\d+)', body, re.IGNORECASE)
            if match:
                return match.group(2)
            
            # Check if the PR is linked to an issue
            issue_url = pr_data.get('issue_url')
            if issue_url:
                issue_number = issue_url.split('/')[-1]
                print(f"Linked Issue Number: {issue_number}")
                return issue_number
            
            # Check branch name for issue number
            branch_name = pr_data.get('head', {}).get('ref', '')
            branch_match = re.search(r'(\d+)', branch_name)
            if branch_match:
                return branch_match.group(1)
            
            return None

        def execute_graphql_query(query, variables):
            request_json = {
                'query': query,
                'variables': variables
            }
            print(f"Sending GraphQL query:")
            print(json.dumps(request_json, indent=2))
            response = requests.post('https://api.github.com/graphql', json=request_json, headers=headers)
            print(f"GraphQL response: {response.text}")
            response.raise_for_status()
            return response.json()

        def get_project_item_id(item_type, item_number):
            query = """
            query GetProjectItemId($owner: String!, $name: String!, $number: Int!) {
              repository(owner: $owner, name: $name) {
                issueOrPullRequest(number: $number) {
                  ... on Issue {
                    projectItems(first: 1) {
                      nodes {
                        id
                      }
                    }
                  }
                  ... on PullRequest {
                    projectItems(first: 1) {
                      nodes {
                        id
                      }
                    }
                  }
                }
              }
            }
            """
            owner, name = repo.split('/')
            variables = {
                "owner": owner,
                "name": name,
                "number": int(item_number)
            }
            print("Query string:")
            print(query)
            print("Variables:")
            print(json.dumps(variables, indent=2))
            data = execute_graphql_query(query, variables)
            
            if 'errors' in data:
                raise Exception(f"GraphQL query failed: {json.dumps(data['errors'])}")
            
            project_items = data.get('data', {}).get('repository', {}).get('issueOrPullRequest', {}).get('projectItems', {}).get('nodes', [])
            
            if not project_items:
                raise Exception(f"No project items found for {item_type} #{item_number}")
            
            return project_items[0]['id']

        def get_status_option_id(status):
            query = """
            query GetStatusOptionId($projectId: ID!) {
              node(id: $projectId) {
                ... on ProjectV2 {
                  field(name: "Status") {
                    ... on ProjectV2SingleSelectField {
                      options {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
            """
            variables = {
                "projectId": project_id
            }
            print("Query string:")
            print(query)
            print("Variables:")
            print(json.dumps(variables, indent=2))
            data = execute_graphql_query(query, variables)
            
            if 'errors' in data:
                raise Exception(f"GraphQL query failed: {json.dumps(data['errors'])}")
            
            options = data.get('data', {}).get('node', {}).get('field', {}).get('options', [])
            print(f"Available status options: {options}")
            
            for option in options:
                if option['name'].lower() == status.lower():
                    return option['id']
            
            raise Exception(f"Status option '{status}' not found in project")

        def update_project_status(status):
            try:
                issue_number = get_linked_issue_number()
                if issue_number:
                    item_id = get_project_item_id('Issue', issue_number)
                    print(f"Updating linked Issue #{issue_number}")
                else:
                    item_id = get_project_item_id('PullRequest', pr_number)
                    print(f"Updating PR #{pr_number}")
                print(f"Project item ID: {item_id}")
                status_option_id = get_status_option_id(status)
                print(f"Status option ID for '{status}': {status_option_id}")
            except Exception as e:
                print(f"Error getting project item or status option: {str(e)}")
                return

            query = """
            mutation UpdateProjectStatus($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
              updateProjectV2ItemFieldValue(
                input: {
                  projectId: $projectId
                  itemId: $itemId
                  fieldId: $fieldId
                  value: {
                    singleSelectOptionId: $optionId
                  }
                }
              ) {
                projectV2Item {
                  id
                }
              }
            }
            """
            variables = {
                "projectId": project_id,
                "itemId": item_id,
                "fieldId": status_field_id,
                "optionId": status_option_id
            }
            print("Query string:")
            print(query)
            print("Variables:")
            print(json.dumps(variables, indent=2))
            data = execute_graphql_query(query, variables)
            
            if 'errors' in data:
                raise Exception(f"GraphQL mutation failed: {json.dumps(data['errors'])}")
            print(f"Successfully updated project status to {status}")

        try:
            print(f"PR Action: {pr_action}, PR Merged: {pr_merged}")
            if pr_action == 'opened':
                update_project_status('Reviewing')
            elif pr_action == 'closed':
                if pr_merged:
                    update_project_status('Done')
                else:
                    update_project_status('In Progress')
            elif pr_action == 'reopened':
                update_project_status('In Progress')
        except Exception as e:
            print(f"Error updating project status: {str(e)}")
            sys.exit(1)

        EOF

        python update_status.py
