name: Issue and Project Status Update

on:
  create:
    branches:
      - '**'
  pull_request:
    types: [opened, closed, reopened]

jobs:
  update_issue_and_project:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Extract issue number from branch name
      id: extract_issue_number
      run: echo "issue_number=$(echo ${GITHUB_REF#refs/heads/} | grep -o -E '[0-9]+')" >> $GITHUB_OUTPUT

    - name: Update Issue and Project Status
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PROJECT_TOKEN: ${{ secrets.PROJECT_TOKEN }}
        REPO: ${{ github.repository }}
        ISSUE_NUMBER: ${{ steps.extract_issue_number.outputs.issue_number }}
        EVENT_NAME: ${{ github.event_name }}
        PR_ACTION: ${{ github.event.action }}
        PR_MERGED: ${{ github.event.pull_request.merged }}
        PROJECT_ID: ${{ secrets.PROJECT_ID }}
        STATUS_FIELD_ID: ${{ secrets.STATUS_FIELD_ID }}
      run: |
        cat << EOF > update_status.py
        import os
        import requests
        import json
        import sys

        # GitHub API設定
        token = os.environ['PROJECT_TOKEN'] if 'PROJECT_TOKEN' in os.environ else os.environ['GITHUB_TOKEN']
        repo = os.environ['REPO']
        issue_number = os.environ['ISSUE_NUMBER']
        event_name = os.environ['EVENT_NAME']
        pr_action = os.environ.get('PR_ACTION')
        pr_merged = os.environ.get('PR_MERGED')
        project_id = os.environ['PROJECT_ID']
        status_field_id = os.environ['STATUS_FIELD_ID']

        print(f"Project ID: {project_id}")
        print(f"Status Field ID: {status_field_id}")

        headers = {
            'Authorization': f'Bearer {token}',
            'Accept': 'application/vnd.github.v3+json'
        }

        base_url = f'https://api.github.com/repos/{repo}'

        def update_issue_status(state, state_reason=None):
            url = f'{base_url}/issues/{issue_number}'
            data = {'state': state}
            if state_reason:
                data['state_reason'] = state_reason
            response = requests.patch(url, headers=headers, json=data)
            try:
                response.raise_for_status()
                print(f"Successfully updated issue status to {state}")
            except requests.exceptions.HTTPError as e:
                print(f"HTTP Error occurred: {e}")
                print(f"Response content: {response.content}")
                raise

        def get_project_item_id():
            query = '''
            query($owner: String!, $name: String!, $number: Int!) {
              repository(owner: $owner, name: $name) {
                issue(number: $number) {
                  projectItems(first: 1) {
                    nodes {
                      id
                    }
                  }
                }
              }
            }
            '''
            owner, name = repo.split('/')
            variables = {
                "owner": owner,
                "name": name,
                "number": int(issue_number)
            }
            response = requests.post('https://api.github.com/graphql', json={'query': query, 'variables': variables}, headers=headers)
            print(f"Get project item ID response: {response.json()}")
            response.raise_for_status()
            data = response.json()
            
            if 'errors' in data:
                raise Exception(f"GraphQL query failed: {json.dumps(data['errors'])}")
            
            project_items = data.get('data', {}).get('repository', {}).get('issue', {}).get('projectItems', {}).get('nodes', [])
            
            if not project_items:
                raise Exception(f"No project items found for issue #{issue_number}")
            
            return project_items[0]['id']

        def get_status_option_id(status):
            query = '''
            query($projectId: ID!, $fieldId: ID!) {
              node(id: $projectId) {
                ... on ProjectV2 {
                  field(id: $fieldId) {
                    ... on ProjectV2SingleSelectField {
                      options {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
            '''
            variables = {
                "projectId": project_id,
                "fieldId": status_field_id
            }
            response = requests.post('https://api.github.com/graphql', json={'query': query, 'variables': variables}, headers=headers)
            print(f"Get status option ID response: {response.json()}")
            response.raise_for_status()
            data = response.json()
            
            if 'errors' in data:
                raise Exception(f"GraphQL query failed: {json.dumps(data['errors'])}")
            
            options = data.get('data', {}).get('node', {}).get('field', {}).get('options', [])
            print(f"Available status options: {options}")
            
            for option in options:
                if option['name'].lower() == status.lower():
                    return option['id']
            
            raise Exception(f"Status option '{status}' not found in project")

        def update_project_status(status):
            try:
                item_id = get_project_item_id()
                print(f"Project item ID: {item_id}")
                status_option_id = get_status_option_id(status)
                print(f"Status option ID for '{status}': {status_option_id}")
            except Exception as e:
                print(f"Error getting project item or status option: {str(e)}")
                return

            query = '''
            mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
              updateProjectV2ItemFieldValue(
                input: {
                  projectId: $projectId
                  itemId: $itemId
                  fieldId: $fieldId
                  value: {
                    singleSelectOptionId: $optionId
                  }
                }
              ) {
                projectV2Item {
                  id
                }
              }
            }
            '''
            variables = {
                "projectId": project_id,
                "itemId": item_id,
                "fieldId": status_field_id,
                "optionId": status_option_id
            }
            response = requests.post('https://api.github.com/graphql', json={'query': query, 'variables': variables}, headers=headers)
            print(f"Update project status response: {response.json()}")
            try:
                response.raise_for_status()
                data = response.json()
                if 'errors' in data:
                    raise Exception(f"GraphQL mutation failed: {json.dumps(data['errors'])}")
                print(f"Successfully updated project status to {status}")
            except Exception as e:
                print(f"Error updating project status: {str(e)}")
                print(f"Response content: {response.content}")
                raise

        try:
            print(f"Event: {event_name}, PR Action: {pr_action}, PR Merged: {pr_merged}")
            if event_name == 'create':
                update_issue_status('open')
                update_project_status('In Progress')
            elif event_name == 'pull_request':
                if pr_action == 'opened':
                    update_issue_status('open')
                    update_project_status('Reviewing')
                elif pr_action == 'closed':
                    if pr_merged == 'true':
                        update_issue_status('closed', 'completed')
                        update_project_status('Done')
                    else:
                        update_issue_status('open')
                        update_project_status('In Progress')
        except Exception as e:
            print(f"Error updating issue or project status: {str(e)}")
            sys.exit(1)

        EOF

        python update_status.py
